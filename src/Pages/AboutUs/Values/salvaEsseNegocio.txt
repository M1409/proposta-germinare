export function ConnectDots({ cx, cy, fill, brightness = 100}) {
  return <circle r="5px" cx={`${cx}px`} cy={`${cy}px`} fill={fill}  style={{filter: `brightness(${brightness}%)`}}></circle>;
}

export function GenerateSemi({start, end, curve1, curve2, curve3, fill}){

    const relativeD = ` M ${start.cx} ${start.cy} C ${curve1.cx} ${curve1.cy} ${curve2.cx} ${curve2.cy} ${end.cx} ${end.cy} Q ${curve3.cx} ${curve3.cy} ${start.cx} ${start.cy} `;
    return <path d={relativeD} fill={fill} />
  
}

function pts(sideCount, radius, c=0) {
  const angle = 360 / sideCount;
  const vertexIndices = range(sideCount);
  const offsetDeg = 90 - (180 - angle) / 2;
  const offset = degreesToRadians(offsetDeg);

  return vertexIndices.map((index) => {
    return {
      theta: offset + degreesToRadians(angle * index) + c,
      r: radius,
    };
  });
}

function range(count) {
  return Array.from(Array(count).keys());
}

function degreesToRadians(angleInDegrees) {
  return (Math.PI * angleInDegrees) / 180;
}

function polygon([cx, cy], sideCount, radius, c=0) {
  return pts(sideCount, radius, c)
    .map(({ r, theta }) => [cx + r * Math.cos(theta), cy + r * Math.sin(theta)])
    .join(" ");
}

function convertPoints(points) {
  function convertToInt(value) {
    return Math.floor(parseFloat(value));
  }

  return points.split(" ").map((it) => {
    let s = it.split(",");

    return {
        cx: convertToInt(s[0]),
        cy: convertToInt(s[1]),
      }
  });
}


let values = [
  {
    name: "Atitude de Dono",
    fill: "#1585B4",
    coords: {}
  },
  {
    name: "Determinação",
    fill: "#79AB5C",
    coords: {}
  },
  {
    name: "Disciplina",
    fill: "#EF933B",
    coords: {}
  },
  {
    name: "Disponibilidade",
    fill: "#E86339",
    coords: {}
  },
  {
    name: "Simplicidade",
    fill: "#46A261",
    coords: {}
  },
  {
    name: "Franqueza",
    fill:"#D5202A",
    coords: {}
  },
  {
    name: "Humildade",
    fill:"#1B9BC7",
    coords: {}
  },
];

convertPoints(polygon([200,200], 7, 100)).forEach((it,index) => {
  values[index].coords["start"] = it
})

convertPoints(polygon([200,200], 7, 150, 1.45)).forEach((it,index) => {
  values[index].coords["end"] = it
})

convertPoints(polygon([200,200], 7, 180, 0.6)).forEach((it,index) => {
  values[index].coords["curve1"] = it
})


convertPoints(polygon([200,200], 7, 180, 0.8)).forEach((it,index) => {
  values[index].coords["curve2"] = it
})

convertPoints(polygon([200,200], 7, 160, 1)).forEach((it,index) => {
  values[index].coords["curve3"] = it
})


export function OurValues() {
  const p = `
    6.67910432047708,251.25457339269357 39.3939539587453,80.8123413477957 193.04843203236987,0.12084725316793765 351.9375825717642,69.94243196857661 396.4146344727586,237.7000181025502 292.98746048738747,377.06872166508276 119.53883215649745,383.1010662701332
    `;
  return (
    <div>
      <svg width="400px" height="400px">
        {/* <polygon fill="red" points={p} /> */}
        {/* <circle r="100px" cx="200px" cy="200px" fill="gray"></circle> */}
        {/* <polygon points="290,243 222,297 137,278 100,200 137,121 222,102 290,156" /> */}

        {values.map((it) => {
          console.log(it.coords)
          return (
            <g>
            <GenerateSemi {...it.coords} fill={it.fill}/> 
            {/* <ConnectDots {...it.coords.curve1} fill={it.fill} brightness={100}/>
            <ConnectDots {...it.coords.curve2} fill={it.fill} brightness={60}/>
            <ConnectDots {...it.coords.curve3} fill={it.fill} brightness={10}/> */}
          </g>
        )})}
      </svg>
    </div>
  );
}
